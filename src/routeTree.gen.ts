/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SettingImport } from './routes/setting'
import { Route as ModsImport } from './routes/mods'
import { Route as LayoutImport } from './routes/_layout'
import { Route as IndexImport } from './routes/index'
import { Route as EditServerImport } from './routes/edit/server'
import { Route as EditModConfigImport } from './routes/edit/mod-config'

// Create/Update Routes

const SettingRoute = SettingImport.update({
  id: '/setting',
  path: '/setting',
  getParentRoute: () => rootRoute,
} as any)

const ModsRoute = ModsImport.update({
  id: '/mods',
  path: '/mods',
  getParentRoute: () => rootRoute,
} as any)

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const EditServerRoute = EditServerImport.update({
  id: '/edit/server',
  path: '/edit/server',
  getParentRoute: () => rootRoute,
} as any)

const EditModConfigRoute = EditModConfigImport.update({
  id: '/edit/mod-config',
  path: '/edit/mod-config',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/mods': {
      id: '/mods'
      path: '/mods'
      fullPath: '/mods'
      preLoaderRoute: typeof ModsImport
      parentRoute: typeof rootRoute
    }
    '/setting': {
      id: '/setting'
      path: '/setting'
      fullPath: '/setting'
      preLoaderRoute: typeof SettingImport
      parentRoute: typeof rootRoute
    }
    '/edit/mod-config': {
      id: '/edit/mod-config'
      path: '/edit/mod-config'
      fullPath: '/edit/mod-config'
      preLoaderRoute: typeof EditModConfigImport
      parentRoute: typeof rootRoute
    }
    '/edit/server': {
      id: '/edit/server'
      path: '/edit/server'
      fullPath: '/edit/server'
      preLoaderRoute: typeof EditServerImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof LayoutRoute
  '/mods': typeof ModsRoute
  '/setting': typeof SettingRoute
  '/edit/mod-config': typeof EditModConfigRoute
  '/edit/server': typeof EditServerRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof LayoutRoute
  '/mods': typeof ModsRoute
  '/setting': typeof SettingRoute
  '/edit/mod-config': typeof EditModConfigRoute
  '/edit/server': typeof EditServerRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_layout': typeof LayoutRoute
  '/mods': typeof ModsRoute
  '/setting': typeof SettingRoute
  '/edit/mod-config': typeof EditModConfigRoute
  '/edit/server': typeof EditServerRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/mods'
    | '/setting'
    | '/edit/mod-config'
    | '/edit/server'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/mods' | '/setting' | '/edit/mod-config' | '/edit/server'
  id:
    | '__root__'
    | '/'
    | '/_layout'
    | '/mods'
    | '/setting'
    | '/edit/mod-config'
    | '/edit/server'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LayoutRoute: typeof LayoutRoute
  ModsRoute: typeof ModsRoute
  SettingRoute: typeof SettingRoute
  EditModConfigRoute: typeof EditModConfigRoute
  EditServerRoute: typeof EditServerRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LayoutRoute: LayoutRoute,
  ModsRoute: ModsRoute,
  SettingRoute: SettingRoute,
  EditModConfigRoute: EditModConfigRoute,
  EditServerRoute: EditServerRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_layout",
        "/mods",
        "/setting",
        "/edit/mod-config",
        "/edit/server"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_layout": {
      "filePath": "_layout.tsx"
    },
    "/mods": {
      "filePath": "mods.tsx"
    },
    "/setting": {
      "filePath": "setting.tsx"
    },
    "/edit/mod-config": {
      "filePath": "edit/mod-config.tsx"
    },
    "/edit/server": {
      "filePath": "edit/server.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
